// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	tea "github.com/charmbracelet/bubbletea"
)

// Spinner is an autogenerated mock type for the Spinner type
type Spinner struct {
	mock.Mock
}

// Done provides a mock function with given fields: _a0
func (_m *Spinner) Done(_a0 string) {
	_m.Called(_a0)
}

// Error provides a mock function with given fields: _a0
func (_m *Spinner) Error(_a0 string) {
	_m.Called(_a0)
}

// Run provides a mock function with given fields:
func (_m *Spinner) Run() (tea.Model, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 tea.Model
	var r1 error
	if rf, ok := ret.Get(0).(func() (tea.Model, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() tea.Model); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tea.Model)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Spinner) Update(_a0 string) {
	_m.Called(_a0)
}

// NewSpinner creates a new instance of Spinner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpinner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Spinner {
	mock := &Spinner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
