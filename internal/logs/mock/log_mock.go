// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anibaldeboni/rapper/internal/logs (interfaces: Logger)
//
// Generated by this command:
//
//	mockgen -destination mock/log_mock.go github.com/anibaldeboni/rapper/internal/logs Logger
//

// Package mock_logs is a generated GoMock package.
package mock_logs

import (
	reflect "reflect"

	logs "github.com/anibaldeboni/rapper/internal/logs"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLogger) Add(arg0 logs.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockLoggerMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLogger)(nil).Add), arg0)
}

// Get mocks base method.
func (m *MockLogger) Get() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockLoggerMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLogger)(nil).Get))
}

// HasNewLogs mocks base method.
func (m *MockLogger) HasNewLogs() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNewLogs")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNewLogs indicates an expected call of HasNewLogs.
func (mr *MockLoggerMockRecorder) HasNewLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNewLogs", reflect.TypeOf((*MockLogger)(nil).HasNewLogs))
}

// Len mocks base method.
func (m *MockLogger) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockLoggerMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockLogger)(nil).Len))
}

// Write mocks base method.
func (m *MockLogger) Write(arg0 logs.Line) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", arg0)
}

// Write indicates an expected call of Write.
func (mr *MockLoggerMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLogger)(nil).Write), arg0)
}
