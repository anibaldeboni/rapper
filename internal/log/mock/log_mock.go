// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anibaldeboni/rapper/internal/log (interfaces: LogManager)
//
// Generated by this command:
//
//	mockgen -destination mock/log_mock.go github.com/anibaldeboni/rapper/internal/log LogManager
//

// Package mock_log is a generated GoMock package.
package mock_log

import (
	reflect "reflect"

	log "github.com/anibaldeboni/rapper/internal/log"
	gomock "go.uber.org/mock/gomock"
)

// MockLogManager is a mock of LogManager interface.
type MockLogManager struct {
	ctrl     *gomock.Controller
	recorder *MockLogManagerMockRecorder
}

// MockLogManagerMockRecorder is the mock recorder for MockLogManager.
type MockLogManagerMockRecorder struct {
	mock *MockLogManager
}

// NewMockLogManager creates a new mock instance.
func NewMockLogManager(ctrl *gomock.Controller) *MockLogManager {
	mock := &MockLogManager{ctrl: ctrl}
	mock.recorder = &MockLogManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogManager) EXPECT() *MockLogManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLogManager) Add(arg0 log.LogMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockLogManagerMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLogManager)(nil).Add), arg0)
}

// Get mocks base method.
func (m *MockLogManager) Get() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockLogManagerMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLogManager)(nil).Get))
}

// HasNewLogs mocks base method.
func (m *MockLogManager) HasNewLogs() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNewLogs")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNewLogs indicates an expected call of HasNewLogs.
func (mr *MockLogManagerMockRecorder) HasNewLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNewLogs", reflect.TypeOf((*MockLogManager)(nil).HasNewLogs))
}

// Len mocks base method.
func (m *MockLogManager) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockLogManagerMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockLogManager)(nil).Len))
}
