// Code generated by mockery v2.40.1. DO NOT EDIT.

package logMocks

import (
	log "github.com/anibaldeboni/rapper/internal/log"
	mock "github.com/stretchr/testify/mock"
)

// LogManager is an autogenerated mock type for the LogManager type
type LogManager struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *LogManager) Add(_a0 log.LogMessage) {
	_m.Called(_a0)
}

// Get provides a mock function with given fields:
func (_m *LogManager) Get() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// HasNewLogs provides a mock function with given fields:
func (_m *LogManager) HasNewLogs() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasNewLogs")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *LogManager) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewLogManager creates a new instance of LogManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogManager {
	mock := &LogManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
